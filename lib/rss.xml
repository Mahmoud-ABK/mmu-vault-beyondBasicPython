<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[obsidianmd]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib/media/favicon.png</url><title>obsidianmd</title><link></link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Fri, 13 Jun 2025 16:33:41 GMT</lastBuildDate><atom:link href="lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Fri, 13 Jun 2025 16:33:37 GMT</pubDate><ttl>60</ttl><dc:creator></dc:creator><item><title><![CDATA[Future Expansion]]></title><description><![CDATA[ 
 <br><br>
<br><a data-href="Core Python Deep Dives" href="Core Python Deep Dives" class="internal-link" target="_self" rel="noopener nofollow">Core Python Deep Dives</a>: Explore advanced Python features like dunder methods, iterators, generators, comprehensions, context managers, decorators, closures, and functional tools (map, filter, reduce, lambda, functools).<br>
Relevance:

<br>Software Development: Simplifies code with elegant patterns like decorators and context managers for robust applications.
<br>Data Science: Functional tools and comprehensions speed up data processing and transformation tasks.
<br>Machine Learning: Generators and iterators optimize memory usage for large datasets and model training.


<br><a data-href="Object Oriented Programming (OOP)" href="Object Oriented Programming (OOP)" class="internal-link" target="_self" rel="noopener nofollow">Object Oriented Programming (OOP)</a>: Master OOP in Python, covering classes, objects, inheritance, polymorphism, class/static methods, method resolution order (MRO), abstract base classes, properties, descriptors, and custom exceptions.<br>
Relevance:

<br>Software Development: Structures scalable, maintainable codebases with advanced class designs.
<br>Machine Learning: Supports custom model architectures in frameworks like PyTorch.
<br>Backend Development: Underpins framework-based apps (e.g., Django models) with MRO and properties.


<br><a data-href="Modules and Packages" href="Modules and Packages" class="internal-link" target="_self" rel="noopener nofollow">Modules and Packages</a>: Learn to manage imports with importlib, sys.path, relative imports, and create/publish Python packages using setup.py or pyproject.toml.<br>
Relevance:

<br>Software Development: Essential for building and distributing reusable libraries and tools.
<br>Data Science: Simplifies sharing custom utilities across projects with packaged code.
<br>Open Source: Enables contribution to ecosystems like PyPI with well-structured packages.


<br><a data-href="Typing and Annotations" href="Typing and Annotations" class="internal-link" target="_self" rel="noopener nofollow">Typing and Annotations</a>: Understand type hints (List, Dict, Optional, Union), TypedDict, Protocol, generics, and tools like mypy and pyright for static type checking.<br>
Relevance:

<br>Software Development: Improves code reliability and IDE support for large projects.
<br>Data Science: Ensures data pipeline integrity with typed inputs/outputs.
<br>Machine Learning: Enhances clarity in complex model codebases with type annotations.


<br><a data-href="Testing in Python" href="Testing in Python" class="internal-link" target="_self" rel="noopener nofollow">Testing in Python</a>: Dive into testing with unittest, pytest, mocking, test discovery, fixtures, and coverage tools to ensure code quality.<br>
Relevance:

<br>Software Development: Critical for maintaining robust, bug-free applications.
<br>Data Science: Validates data processing pipelines and analysis scripts.
<br>Machine Learning: Ensures model correctness and reproducibility through automated tests.


<br><a data-href="Performance Optimization" href="Performance Optimization" class="internal-link" target="_self" rel="noopener nofollow">Performance Optimization</a>: Optimize Python with profiling, caching, parallelism, the GIL, multithreading, multiprocessing, asyncio, memory profiling, and efficient use of collections, itertools, and heapq.<br>
Relevance:

<br>Software Development: Boosts application speed for scalable, high-performance systems.
<br>Data Science: Accelerates data processing for large datasets with optimized tools.
<br>Machine Learning: Reduces training time with multiprocessing and memory-efficient structures.


<br><a data-href="Python Extras" href="Python Extras" class="internal-link" target="_self" rel="noopener nofollow">Python Extras</a>: Discover Pythonic idioms, real-world code review practices, REPL tricks, and building CLI apps with argparse or click.<br>
Relevance:

<br>Software Development: Enhances code readability and productivity with idiomatic patterns and CLI tools.
<br>Data Science: Streamlines workflows with custom CLI scripts for data tasks.
<br>Cybersecurity: Code review practices help identify vulnerabilities in Python projects.


<br><a data-href="Design Patterns" href="Design Patterns" class="internal-link" target="_self" rel="noopener nofollow">Design Patterns</a>: Understand common design patterns and how they can be implemented in Python.<br>
Relevance:

<br>Software Development: Enhances code structure for maintainability and scalability.
<br>Backend Development: Supports robust web app designs with patterns like Singleton or Factory.
<br>Machine Learning: Applies patterns for modular model pipelines.


<br><a data-href="Python GUI Development" href="Python GUI Development" class="internal-link" target="_self" rel="noopener nofollow">Python GUI Development</a>: Explore libraries such as Tkinter and web-based interfaces with Dash.<br>
Relevance:

<br>Software Development: Enables building user-friendly desktop and web interfaces.
<br>Data Science: Facilitates interactive dashboards for data exploration.
<br>Machine Learning: Supports visualization of model outputs in GUI apps.


<br><a data-href="Popular Frameworks" href="Popular Frameworks" class="internal-link" target="_self" rel="noopener nofollow">Popular Frameworks</a>: Discover tools like Django, Flask (web), pandas (data analysis), and PyTorch (AI).<br>
Relevance:

<br>Backend Development: Powers web apps with Django and Flask.
<br>Data Science: pandas enables efficient data manipulation and analysis.
<br>Machine Learning: PyTorch drives advanced model development.


<br><a data-href="Statistics and Probability in Python" href="Statistics and Probability in Python" class="internal-link" target="_self" rel="noopener nofollow">Statistics and Probability in Python</a>: Learn how to work with statistical concepts, libraries, and techniques in Python for data analysis and visualization.<br>
Relevance:

<br>Data Science: Core for hypothesis testing and data insights.
<br>Machine Learning: Essential for understanding model assumptions and metrics.
<br>Cybersecurity: Supports anomaly detection with statistical methods.


<br><a data-href="Advanced Data Structures" href="Advanced Data Structures" class="internal-link" target="_self" rel="noopener nofollow">Advanced Data Structures</a>: Delve into complex data structures and algorithms in Python, such as graphs, heaps, hash tables, and trees.<br>
Relevance:

<br>Software Development: Optimizes algorithms for performance-critical applications.
<br>Data Science: Enables efficient data processing and querying.
<br>Machine Learning: Supports graph-based models and feature engineering.


<br><a data-href="Remote Jupyter Workflows" href="Remote Jupyter Workflows" class="internal-link" target="_self" rel="noopener nofollow">Remote Jupyter Workflows</a>: Connect your local JupyterLab to remote compute—either by syncing full notebooks to cloud services or by running heavy cells on a remote kernel—so you can use free/freemium GPU or CPU resources without leaving your IDE.  Relevance:

<br>Data Science: Run large analyses and model training on cloud GPUs (e.g., Colab, Kaggle) while exploring data locally.
<br>Machine Learning: Offload training loops to remote kernels via SSH or papermill for faster, reproducible workflows.
<br>DevOps &amp; Cost Management: Adopt remote execution patterns using free-tier services to scale compute on a budget.


<br><a data-href="Pickle and Serialization" href="Pickle and Serialization" class="internal-link" target="_self" rel="noopener nofollow">Pickle and Serialization</a>: Understand the concept of serialization, how to work with Pickle for data storage, and why security considerations matter in the context of serializing objects in Python.<br>
Relevance:

<br>Data Science: Used for saving machine learning models, datasets, and pipelines for later use.
<br>Backend Development: Often used for caching or persisting session states.
<br>Cybersecurity: Understanding vulnerabilities associated with deserializing untrusted data (e.g., Pickle-based exploits).


]]></description><link>future-expansion.html</link><guid isPermaLink="false">Future Expansion.md</guid><pubDate>Fri, 13 Jun 2025 13:30:03 GMT</pubDate></item><item><title><![CDATA[Plotting in Python]]></title><description><![CDATA[ 
 <br>Plotting in Python can feel overwhelming—too many libraries, syntax quirks, and trial-and-error moments. I used to lean on LLMs for quick answers, but they often left me piecing things together. This page is your go-to guide for mastering Python plotting, offering clear explanations, reusable patterns, and troubleshooting tips to make visualizations intuitive and efficient.<br>
⚠️ Note on scope:<br>
This guide is focused purely on the technical side of plotting—how to use visualization libraries, understand their syntax, and craft common plot types efficiently. It does not cover interpreting what the plots mean or how to draw insights from them.
For that, check out the <a data-tooltip-position="top" aria-label="Data analysis Summary" data-href="Data analysis Summary" href="Data analysis Summary" class="internal-link" target="_self" rel="noopener nofollow">Data Analysis</a> vault , where you'll find guidance on how to read, interpret, and communicate what your visualizations are actually saying.
<br><br><br><br>
<br><a data-tooltip-position="top" aria-label="Plotting in Python > 🔹 1. Introduction" data-href="Plotting in Python#🔹 1. Introduction" href="plotting-in-python.html#🔹_1._Introduction" class="internal-link" target="_self" rel="noopener nofollow">Introduction</a><br>
1.1 <a data-tooltip-position="top" aria-label="Plotting in Python > 1.1 Why visualization matters in programming" data-href="Plotting in Python#1.1 Why visualization matters in programming" href="plotting-in-python.html#1.1_Why_visualization_matters_in_programming" class="internal-link" target="_self" rel="noopener nofollow">Why Visualization Matters in Programming</a><br>
1.2 <a data-tooltip-position="top" aria-label="Plotting in Python > 1.2 Overview of popular plotting libraries" data-href="Plotting in Python#1.2 Overview of popular plotting libraries" href="plotting-in-python.html#1.2_Overview_of_popular_plotting_libraries" class="internal-link" target="_self" rel="noopener nofollow">Overview of Popular Plotting Libraries</a>
<br><a data-tooltip-position="top" aria-label="Plotting in Python > 🔹 2. Core Concepts of Plotting in Python" data-href="Plotting in Python#🔹 2. Core Concepts of Plotting in Python" href="plotting-in-python.html#🔹_2._Core_Concepts_of_Plotting_in_Python" class="internal-link" target="_self" rel="noopener nofollow">Core Concepts of Plotting in Python</a><br>
2.1 <a data-tooltip-position="top" aria-label="Plotting in Python > 2.1 Figures and Axes The Plotting Canvas" data-href="Plotting in Python#2.1 Figures and Axes The Plotting Canvas" href="plotting-in-python.html#2.1_Figures_and_Axes_The_Plotting_Canvas" class="internal-link" target="_self" rel="noopener nofollow">Figures and Axes: The Plotting Canvas</a><br>
2.2 <a data-tooltip-position="top" aria-label="Plotting in Python > 2.2 Stateful vs. Object-Oriented Approaches" data-href="Plotting in Python#2.2 Stateful vs. Object-Oriented Approaches" href="plotting-in-python.html#2.2_Stateful_vs._Object-Oriented_Approaches" class="internal-link" target="_self" rel="noopener nofollow">Stateful vs. Object-Oriented Approaches</a><br>
2.3 <a data-tooltip-position="top" aria-label="Plotting in Python > 2.3 Basic Plot Components" data-href="Plotting in Python#2.3 Basic Plot Components" href="plotting-in-python.html#2.3_Basic_Plot_Components" class="internal-link" target="_self" rel="noopener nofollow">Basic Plot Components</a>
<br><a data-tooltip-position="top" aria-label="Plotting in Python > 🔹 3. Matplotlib The Foundation of Python Plotting" data-href="Plotting in Python#🔹 3. Matplotlib The Foundation of Python Plotting" href="plotting-in-python.html#🔹_3._Matplotlib_The_Foundation_of_Python_Plotting" class="internal-link" target="_self" rel="noopener nofollow">Matplotlib: The Foundation of Python Plotting</a><br>
3.1 <a data-tooltip-position="top" aria-label="Plotting in Python > 3.1 Basic syntax and structure" data-href="Plotting in Python#3.1 Basic syntax and structure" href="plotting-in-python.html#3.1_Basic_syntax_and_structure" class="internal-link" target="_self" rel="noopener nofollow">Basic Syntax and Structure</a><br>
3.2 <a data-tooltip-position="top" aria-label="Plotting in Python > 3.2 Common plot types" data-href="Plotting in Python#3.2 Common plot types" href="plotting-in-python.html#3.2_Common_plot_types" class="internal-link" target="_self" rel="noopener nofollow">Common Plot Types</a><br>
3.3 <a data-tooltip-position="top" aria-label="Plotting in Python > 3.3 Customizing plots" data-href="Plotting in Python#3.3 Customizing plots" href="plotting-in-python.html#3.3_Customizing_plots" class="internal-link" target="_self" rel="noopener nofollow">Customizing Plots</a><br>
3.4 <a data-tooltip-position="top" aria-label="Plotting in Python > 3.4 Saving plots" data-href="Plotting in Python#3.4 Saving plots" href="plotting-in-python.html#3.4_Saving_plots" class="internal-link" target="_self" rel="noopener nofollow">Saving Plots</a>
<br><a data-tooltip-position="top" aria-label="Plotting in Python > 🔹4. Seaborn Simplifying Statistical Visualization" data-href="Plotting in Python#🔹4. Seaborn Simplifying Statistical Visualization" href="plotting-in-python.html#🔹4._Seaborn_Simplifying_Statistical_Visualization" class="internal-link" target="_self" rel="noopener nofollow">Seaborn: Simplifying Statistical Visualization</a><br>
4.1 <a data-tooltip-position="top" aria-label="Plotting in Python > 4.1 Why Seaborn?" data-href="Plotting in Python#4.1 Why Seaborn?" href="plotting-in-python.html#4.1_Why_Seaborn" class="internal-link" target="_self" rel="noopener nofollow">Why Seaborn?</a><br>
4.2 <a data-tooltip-position="top" aria-label="Plotting in Python > 4.2 Basic syntax" data-href="Plotting in Python#4.2 Basic syntax" href="plotting-in-python.html#4.2_Basic_syntax" class="internal-link" target="_self" rel="noopener nofollow">Basic Syntax</a><br>
4.3 <a data-tooltip-position="top" aria-label="Plotting in Python > 4.3 Working with DataFrames" data-href="Plotting in Python#4.3 Working with DataFrames" href="plotting-in-python.html#4.3_Working_with_DataFrames" class="internal-link" target="_self" rel="noopener nofollow">Working with DataFrames</a>
<br><a data-tooltip-position="top" aria-label="Plotting in Python > 🔹 5. Common Plotting Patterns &amp; Recipes" data-href="Plotting in Python#🔹 5. Common Plotting Patterns &amp; Recipes" href="plotting-in-python.html#🔹_5._Common_Plotting_Patterns_&amp;_Recipes" class="internal-link" target="_self" rel="noopener nofollow">Common Plotting Patterns &amp; Recipes</a><br>
5.1 <a data-tooltip-position="top" aria-label="Plotting in Python > 5.1 Handling large datasets efficiently" data-href="Plotting in Python#5.1 Handling large datasets efficiently" href="plotting-in-python.html#5.1_Handling_large_datasets_efficiently" class="internal-link" target="_self" rel="noopener nofollow">Handling Large Datasets Efficiently</a><br>
5.2 <a data-tooltip-position="top" aria-label="Plotting in Python > 5.2 Multiple subplots and layouts" data-href="Plotting in Python#5.2 Multiple subplots and layouts" href="plotting-in-python.html#5.2_Multiple_subplots_and_layouts" class="internal-link" target="_self" rel="noopener nofollow">Multiple Subplots and Layouts</a><br>
5.3 <a data-tooltip-position="top" aria-label="Plotting in Python > 5.3 Using functions to generate reusable plots" data-href="Plotting in Python#5.3 Using functions to generate reusable plots" href="plotting-in-python.html#5.3_Using_functions_to_generate_reusable_plots" class="internal-link" target="_self" rel="noopener nofollow">Using Functions to Generate Reusable Plots</a><br>
5.4 <a data-tooltip-position="top" aria-label="Plotting in Python > 5.4 Combining multiple plots in one figure" data-href="Plotting in Python#5.4 Combining multiple plots in one figure" href="plotting-in-python.html#5.4_Combining_multiple_plots_in_one_figure" class="internal-link" target="_self" rel="noopener nofollow">Combining Multiple Plots in One Figure</a>
<br><a data-tooltip-position="top" aria-label="Plotting in Python > 🔹6. Debugging &amp; Troubleshooting Plots" data-href="Plotting in Python#🔹6. Debugging &amp; Troubleshooting Plots" href="plotting-in-python.html#🔹6._Debugging_&amp;_Troubleshooting_Plots" class="internal-link" target="_self" rel="noopener nofollow">Debugging &amp; Troubleshooting Plots</a><br>
6.1 <a data-tooltip-position="top" aria-label="Plotting in Python > 6.1 Common Matplotlib" data-href="Plotting in Python#6.1 Common Matplotlib" href="plotting-in-python.html#6.1_Common_Matplotlib" class="internal-link" target="_self" rel="noopener nofollow">Common Errors and How to Fix Them</a><br>
6.2 <a data-tooltip-position="top" aria-label="Plotting in Python > 6.2 Understanding figure size and resolution issues" data-href="Plotting in Python#6.2 Understanding figure size and resolution issues" href="plotting-in-python.html#6.2_Understanding_figure_size_and_resolution_issues" class="internal-link" target="_self" rel="noopener nofollow">Understanding Figure Size and Resolution Issues</a><br>
6.3 <a data-tooltip-position="top" aria-label="Plotting in Python > 6.3 Adjusting overlapping labels" data-href="Plotting in Python#6.3 Adjusting overlapping labels" href="plotting-in-python.html#6.3_Adjusting_overlapping_labels" class="internal-link" target="_self" rel="noopener nofollow">Adjusting Overlapping Labels</a>
<br><a data-tooltip-position="top" aria-label="Plotting in Python > 🔹7. Best Practices &amp; General Guidelines" data-href="Plotting in Python#🔹7. Best Practices &amp; General Guidelines" href="plotting-in-python.html#🔹7._Best_Practices_&amp;_General_Guidelines" class="internal-link" target="_self" rel="noopener nofollow">Best Practices &amp; General Guidelines</a><br>
7.1 <a data-tooltip-position="top" aria-label="Plotting in Python > 7.1 Choosing the right type of plot" data-href="Plotting in Python#7.1 Choosing the right type of plot" href="plotting-in-python.html#7.1_Choosing_the_right_type_of_plot" class="internal-link" target="_self" rel="noopener nofollow">Choosing the Right Type of Plot</a><br>
7.2 <a data-tooltip-position="top" aria-label="Plotting in Python > 7.2 Making plots readable and interpretable" data-href="Plotting in Python#7.2 Making plots readable and interpretable" href="plotting-in-python.html#7.2_Making_plots_readable_and_interpretable" class="internal-link" target="_self" rel="noopener nofollow">Making Plots Readable and Interpretable</a><br>
7.3 <a data-tooltip-position="top" aria-label="Plotting in Python > 7.3 Ensuring reproducibility in scripts" data-href="Plotting in Python#7.3 Ensuring reproducibility in scripts" href="plotting-in-python.html#7.3_Ensuring_reproducibility_in_scripts" class="internal-link" target="_self" rel="noopener nofollow">Ensuring Reproducibility in Scripts</a><br>
7.4 <a data-tooltip-position="top" aria-label="Plotting in Python > 7.4 Exporting high-quality figures for reports" data-href="Plotting in Python#7.4 Exporting high-quality figures for reports" href="plotting-in-python.html#7.4_Exporting_high-quality_figures_for_reports" class="internal-link" target="_self" rel="noopener nofollow">Exporting High-Quality Figures for Reports</a>
<br><br><br><br><br>Visualization helps you understand complex data, spot patterns and outliers, and communicate insights effectively. It's essential for analysis, debugging, and storytelling with data.<br><br>
<br>Matplotlib: The base library for static plots—flexible but verbose.
<br>Seaborn: Built on Matplotlib, great for statistical plots with less code.
<br>Plotly: Interactive and web-friendly, ideal for dashboards and presentations.
<br><br><br>In Python plotting, the Figure and Axes are your primary building blocks:<br>
<br>Figure:<br>
The figure serves as the overall container or "canvas" for your plot. It can house one or more axes (subplots), and it defines the space where everything is rendered. The figure can be thought of as the full page or the entire window in which your plots are drawn.
<br>Axes (Subplots):<br>
The axes are the individual plots or charts contained within the figure. Each axes object includes its own x and y (and possibly z) coordinate systems, along with elements such as titles, labels, grids, and legends. When you create multiple axes, you’re essentially dividing the figure into sections.<br>
For example, in Matplotlib you can create a figure with multiple axes using:
<br>import matplotlib.pyplot as plt
fig, axes = plt.subplots(2, 2)  # Creates a 2x2 grid of subplots

<br>  Each axes (axes[0, 0], axes[0, 1], etc.) is an independent container where you can plot data.<br>
for vizualisation :<br>  <img alt="https://matplotlib.org/stable/_images/users-explain-axes-axes_intro-1.2x.png" src="https://matplotlib.org/stable/_images/users-explain-axes-axes_intro-1.2x.png" referrerpolicy="no-referrer"><br>
<a data-tooltip-position="top" aria-label="https://matplotlib.org/stable/users/explain/axes/axes_intro.html" rel="noopener nofollow" class="external-link" href="https://matplotlib.org/stable/users/explain/axes/axes_intro.html" target="_blank">source</a><br>in essence:<br>
 **An "axe" (or more precisely, Axes in Matplotlib) is a single subplot.<br>
More technically: 

<br>Figure → The whole canvas (think of it like a page).
<br>Axes → A section of the figure where data is plotted (i.e. the actual subplot).
<br>Axis → The X-axis or Y-axis (the lines and ticks inside an Axes).

<br>We'll explore more syntax later <br><br>When creating plots in Python, particularly with Matplotlib, you have two main approaches:<br>
<br>Stateful Approach (using pyplot):<br>
This approach relies on the current active figure and axes. Functions in the pyplot module, such as plt.plot() or plt.title(), implicitly act on the last created or current axes.<br>
Pros:

<br>Quick to use for simple plots or during interactive sessions (e.g., in Jupyter Notebooks).
<br>Less verbose; you don’t have to manage individual axes explicitly.<br>
Cons:
<br>Can lead to confusion when dealing with multiple figures or complex plotting logic, as it depends on implicit state management.


<br>Object-Oriented Approach (using Figure and Axes objects):<br>
This method involves creating figure and axes objects explicitly  (e.g., with plt.subplots()) . You then call methods on these objects to create and customize your plots. 
fig, ax = plt.subplots()
ax.plot([1, 2, 3], [4, 5, 6])
ax.set_title("Sample Plot")


<br>	**Pros:**
	- Offers explicit control over each component of the plot, which enhances modularity and reusability.
	- Avoids issues related to the global state, making it easier to manage multiple plots or subplots within the same figure. 
	**Cons:**
    - Slightly more verbose and requires a bit more setup for very simple plots.
  
### 2.3 Basic Plot Components
Building a clear and informative plot involves several key components:
- **Title and Axis Labels:**  
  Providing a meaningful title and clear axis labels is essential for context. They help your audience understand the subject matter of the plot at a glance.
```python
ax.set_title("Growth Over Time")
ax.set_xlabel("Time (years)")
ax.set_ylabel("Growth (%)")
<br>
<br>Legend:<br>
When your plot contains multiple data series, a legend helps distinguish them by mapping colors, shapes, or line styles to each series. Legends improve the readability of the plot and guide the viewer in interpreting the data correctly.
<br>ax.plot(x, y1, label="Dataset 1")
ax.plot(x, y2, label="Dataset 2")
ax.legend()

<br>
<br>Grid:<br>
Gridlines can enhance the readability of a plot by aligning data points with the corresponding numerical values on the axes. They are particularly useful in plots that involve detailed numerical analysis.
<br>ax.grid(True)
<br>
<br>Annotations:<br>
Annotations are useful for highlighting key points or adding explanatory text directly on the plot. They can include text labels, arrows, and other markers to draw attention to significant data points.
<br>ax.annotate('Peak Value', xy=(2, 5), xytext=(3, 6),
            arrowprops=dict(facecolor='black', shrink=0.05))

<br><img alt="https://matplotlib.org/3.1.1/_images/sphx_glr_anatomy_001.png" src="https://matplotlib.org/3.1.1/_images/sphx_glr_anatomy_001.png" referrerpolicy="no-referrer"><br>
<a data-tooltip-position="top" aria-label="https://matplotlib.org/3.1.1/gallery/showcase/anatomy.html" rel="noopener nofollow" class="external-link" href="https://matplotlib.org/3.1.1/gallery/showcase/anatomy.html" target="_blank">source </a><br><br><br><br>Matplotlib is one of the most widely used libraries in Python for creating static, interactive, and animated visualizations. It serves as the groundwork for many other plotting libraries and offers both a quick, stateful interface for simple plots as well as an object-oriented approach for more complex visuals.<br>actually we explored some syntax in the last section but this is more structured<br><br>import matplotlib.pyplot as plt
import numpy as np

# Generate sample data
x = np.linspace(0, 10, 100)
y = np.sin(x)

# Create a figure and an axes object
fig, ax = plt.subplots(figsize=(8, 5))  # Set figure size

# Plot data
ax.plot(x, y, label='sin(x)')

# Add basic customizations
ax.set_title("Sine Wave Example")
ax.set_xlabel("x (radians)")
ax.set_ylabel("sin(x)")
ax.legend()

# Display the plot
plt.show()

<br>
<br>plt.subplots() creates a figure (fig) and axes (ax), with optional parameters like figsize to control dimensions.
<br>ax.plot() draws data on the specified axes, supporting various styles and formats.
<br>Methods like set_title() set_xlabel(), and set_ylabel() add context, while legend() clarifies data series.
<br>Use plt.figure() for a blank canvas or plt.subplot() for manual multi-plot layouts
<br>Pro Tip: <br>
For complex plots, prefer the object-oriented approach (fig, ax = plt.subplots()) over plt.plot() to avoid confusion with multiple axes.
<br>output of the plot below<br>
<img alt="Pasted image 20250414174928.png" src="assets/pasted-image-20250414174928.png"><br><br><br>Input Data:<br>
<br>x (optional): Array/list of x-values. If omitted, indices are used.
<br>y: Array/list of y-values.
<br>fig, ax = plt.subplots()  
x = np.linspace(0, 10, 100)  
ax.plot(x, np.sin(x), label='sin(x)', linestyle='--', lw=2, marker='o', markersize=4)  
<br>
<br>linestyle='--': Dashed line.
<br>lw=2: Line thickness.
<br>marker='o': Circular markers at data points.
<br>markersize=4: Controls marker size.
<br>Other Common Parameters:<br>
<br>color/c: Line color (e.g., 'red', '#FF5733').
<br>alpha: Transparency (0–1).
<br>markeredgecolor: Edge color of markers.
<br>Pro Tip:  <br>
Use markers sparingly for cleaner plots with dense data.
<br><br>Input Data:<br>
<br>x, y: Arrays/lists of coordinates (equal length).
<br>fig, ax = plt.subplots()  
x = np.random.randn(100)  
y = x + np.random.randn(100) * 0.5  
ax.scatter(x, y, c=y, s=50, cmap='viridis', edgecolor='black', alpha=0.8)  
<br><img alt="Pasted image 20250510201222.png" src="assets/pasted-image-20250510201222.png"><br>
<br>c=y: Color mapped to y values.
<br>s=50: Marker size.
<br>cmap='viridis': Color palette for c.
<br>edgecolor='black': Black marker borders.
<br>Other Common Parameters:<br>
<br>marker: Symbol (e.g., 's', '^').
<br>linewidths: Border thickness.
<br>vmin/vmax: Colormap limits.
<br>Pro Tip:  <br>
Use c with a continuous variable (e.g., temperature) to encode 3D information.
<br><br>Input Data:<br>
<br>categories: List/array of labels (x-axis).
<br>values: List/array of bar heights (y-axis).
<br>fig, ax = plt.subplots()  
categories = ['A', 'B', 'C', 'D']  
values = [15, 20, 12, 25]  
ax.bar(categories, values, width=0.6, align='center', hatch='/', edgecolor='black')  
<br><img alt="Pasted image 20250510201256.png" src="assets/pasted-image-20250510201256.png"><br>
<br>width=0.6: Bar width (default: 0.8).
<br>align='center': Centers bars on x-ticks.
<br>hatch='/': Diagonal stripes.
<br>edgecolor='black': Bar border color.
<br>Other Common Parameters:<br>
<br>
color: Bar fill color.

<br>
alpha: Fill transparency.

<br>
label: For legends.
 Pro Tip:   

Use ax.barh() for horizontal bars with long category labels.


<br><br>Input Data:<br>
<br>Single array/list of values.
<br>fig, ax = plt.subplots()  
data = np.random.randn(1000)  
ax.hist(data, bins=30, density=True, histtype='stepfilled', color='green', alpha=0.5)  
<br><img alt="Pasted image 20250510201415.png" src="assets/pasted-image-20250510201415.png"><br>
<br>bins=30: Number of bins.
<br>density=True: Normalizes to probability density.
<br>histtype='stepfilled': Filled outline (vs. 'bar').
<br>alpha=0.5: Transparency.
<br>Other Common Parameters:<br>
<br>
cumulative=True: Cumulative distribution.

<br>
orientation='horizontal': Horizontal bins.
 Pro Tip:  

 Use density=True to compare distributions with different sample sizes.


<br><br>Input Data:<br>
<br>List of arrays (one array per box).
<br>fig, ax = plt.subplots()  
data = [np.random.normal(0, std, 100) for std in [1, 2, 3]]  
ax.boxplot(data, tick_labels=['A', 'B', 'C'], notch=True, patch_artist=True, widths=0.6)  
<br><img alt="Pasted image 20250510201521.png" src="assets/pasted-image-20250510201521.png"><br>
<br>notch=True: Adds 95% confidence interval notches.
<br>patch_artist=True: Enables color filling.
<br>widths=0.6: Box width.
<br>Other Common Parameters:<br>
<br>showmeans=True: Displays mean markers.
<br>meanline=True: Shows mean as a line (requires showmeans=True).
<br>vert=False: Horizontal boxes.
<br>Pro Tip:  <br>
 Overlapping notches between boxes suggest statistically similar medians.
<br><br>Input Data:<br>
<br>sizes: List of sizes for each wedge.
<br>labels: List of labels for the wedges (optional).
<br>fig, ax = plt.subplots()  
sizes = [25, 35, 20, 20]  
labels = ['A', 'B', 'C', 'D']  
ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, explode=(0, 0.1, 0, 0))  
<br><img alt="Pasted image 20250510201600.png" src="assets/pasted-image-20250510201600.png"><br>
<br>autopct='%1.1f%%': Displays percentages on wedges.
<br>startangle=90: Rotates the start of the pie chart.
<br>explode=(0, 0.1, 0, 0): "Explodes" (offsets) specific slices.
<br>Other Common Parameters:<br>
<br>colors: Custom colors for wedges (e.g., ['red', 'blue', 'green']).
<br>shadow: Adds a shadow behind the chart (True/False).
<br>labeldistance: Distance of labels from the center.
<br>Pro Tip:  <br>
Use autopct for quick readability and explode to highlight specific slices.
<br><br><br><br><br>Matplotlib provides universal parameters to control colors, line styles, and markers across&nbsp;all plot types. These can be applied to lines, bars, markers, edges, and fills.<br><br><br>

<br>Use&nbsp;color maps&nbsp;(e.g.,&nbsp;viridis,&nbsp;plasma) for continuous data in scatter/contour plots.
<br>Combine&nbsp;linestyle&nbsp;and&nbsp;marker&nbsp;in line plots to emphasize data points.
<br>For bar/histogram edges, use&nbsp;edgecolor&nbsp;and&nbsp;linewidth&nbsp;for clarity.

<br><br>ax.grid(True, linestyle='--', alpha=0.6)  # Add grid lines  
ax.text(5, 0, 'Zero Crossing',           # Add text at (5, 0)  
        fontsize=10,  
        color='blue',  
        ha='center'  
)  
ax.annotate('Peak',                        # Add annotation with arrow  
            xy=(np.pi/2, 1),  
            xytext=(3, 0.8),  
            arrowprops=dict(facecolor='black', arrowstyle='-&gt;')  
)  
<br>
<br>grid(): Customize grid visibility and style.
<br>text()/annotate(): Add labels or explanatory arrows.
<br><br>ax.set_xlim(0, 10)                  # Set x-axis range  
ax.set_ylim(-1.5, 1.5)              # Set y-axis range  
ax.set_xticks([0, 5, 10])           # Manually set x-ticks  
ax.set_xticklabels(['Start', 'Mid', 'End'])  # Label ticks  
ax.tick_params(axis='y', direction='inout', length=10)  # Tick direction/length  
<br>Other Parameters:<br>
<br>ax.set_yscale('log'): Use logarithmic scaling.
<br><br>Apply pre-defined themes for quick styling:<br>plt.style.use('ggplot')  # Styles: 'seaborn', 'fivethirtyeight', 'dark_background'  
<br><br>ax.legend(loc='upper left', fontsize=8, frameon=False)  # Remove legend frame  
ax.set_title("Customized Sine Wave", fontsize=14, pad=20)  # Title with padding  
ax.set_xlabel("Time (s)", fontsize=12, labelpad=10)      # Label padding  
<br>Pro Tip: <br>
Use&nbsp;plt.tight_layout()&nbsp;to fix overlapping elements.
<br><br>Save plots to files for reports, papers, or presentations:<br>fig, ax = plt.subplots(figsize=(8, 5))  
ax.plot(x, np.sin(x))  
fig.savefig('sine_wave.png',  
           dpi=300,                 # Higher resolution for publications  
           bbox_inches='tight',      # Remove whitespace around the plot  
           transparent=False,        # Save with transparent background  
           format='png'              # Options: 'pdf', 'svg', 'jpg', 'eps'  
)  
<br>
<br>dpi: Dots per inch (default=100). Use 300+ for high-quality images.
<br>bbox_inches='tight': Automatically trim empty space.
<br>format: Choose output file type.
<br>Supported Formats:<br>
<br>Vector formats: PDF, SVG (ideal for editing in Illustrator/Inkscape).
<br>Raster formats: PNG, JPG (for web/print).
<br>Pro Tip: <br>
Save as PDF/SVG first for scalable edits, then export to PNG as needed.
<br><br><br><br><br><br><br>Seaborn is a high-level Python library built on Matplotlib that simplifies the creation of&nbsp;statistically meaningful&nbsp;and&nbsp;aesthetically pleasing&nbsp;visualizations. Key advantages include:<br>
<br>Statistical Focus: Automatically computes aggregations (e.g., means, confidence intervals) for plots like bar charts and box plots.
<br>Pandas Integration: Works natively with DataFrames, reducing data wrangling.
<br>Smart Defaults: Built-in themes and color palettes improve readability out-of-the-box.
<br>Complex Plots Made Easy: Creates advanced plots (violin plots, pair plots, heatmaps) with minimal code.
<br>Relationship Visualization: Simplifies plotting correlations, distributions, and groupings in multivariate data.
<br>Use Seaborn When:<br>
<br>You need quick exploratory data analysis (EDA).
<br>Your data is stored in a Pandas DataFrame.
<br>You want to visualize distributions, trends, or relationships between variables.
<br><br>import seaborn as sns
import matplotlib.pyplot as plt

# Load built-in dataset
tips = sns.load_dataset("tips")

# Create a scatter plot
sns.scatterplot(data=tips, x="total_bill", y="tip", hue="time")
plt.show()
<br>
<br>data: DataFrame containing the data.
<br>x/y: Column names for axes.
<br>hue: Adds color encoding based on a categorical column.
<br>Automatic Labels: Uses DataFrame column names as axis labels.<br>
same example but in matplotlib
<br># Matplotlib equivalent (more verbose)
fig, ax = plt.subplots()
for time in tips["time"].unique():
    subset = tips[tips["time"] == time]
    ax.scatter(subset["total_bill"], subset["tip"], label=time)
ax.legend(title="Time")
ax.set_xlabel("Total Bill")
ax.set_ylabel("Tip")
plt.show()
<br>
in the rest of seaborn section we'll be visualizing with tips integrated datatset so i guess it would be intuitive to learn know more about the data frame<br>
here is the info() and head()
<br>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 244 entries, 0 to 243
Data columns (total 7 columns):
 #   Column      Non-Null Count  Dtype   
---  ------      --------------  -----   
 0   total_bill  244 non-null    float64 
 1   tip         244 non-null    float64 
 2   sex         244 non-null    category
 3   smoker      244 non-null    category
 4   day         244 non-null    category
 5   time        244 non-null    category
 6   size        244 non-null    int64   
dtypes: category(4), float64(2), int64(1)
memory usage: 7.4 KB
<br><img alt="Pasted image 20250415201945.png" src="assets/pasted-image-20250415201945.png"><br><br><br>Seaborn requires data in&nbsp;tidy format:<br>
<br>Each row = single observation.
<br>Each column = variable.<br>
as a cheatsheet you may look into Explore the&nbsp;<a data-tooltip-position="top" aria-label="https://seaborn.pydata.org/examples/index.html" rel="noopener nofollow" class="external-link" href="https://seaborn.pydata.org/examples/index.html" target="_blank">Seaborn Gallery</a> it has code well documented code snippets in one place 
<br><br><br># Box plot grouped by day
sns.boxplot(data=tips, x="day", y="total_bill", hue="sex", palette="pastel")
plt.show()
<br><img alt="Pasted image 20250415193747.png" src="assets/pasted-image-20250415193747.png"><br>
<br>palette: Controls color scheme (e.g., "viridis", "husl").
<br><br># Histogram with kernel density estimate (KDE)
sns.histplot(data=tips, x="total_bill", kde=True, hue="sex", element="step")
<br><img alt="Pasted image 20250510201802.png" src="assets/pasted-image-20250510201802.png"><br>
<br>kde=True: Overlays a density curve.
<br>element: "step" for cleaner histograms.<br>
to demonstrate a kde=False will look like this<br>
<img alt="Pasted image 20250510201822.png" src="assets/pasted-image-20250510201822.png">
<br><br># Plot pairwise relationships
sns.pairplot(tips, hue="smoker", corner=True)
<br><img alt="Pasted image 20250510202129.png" src="assets/pasted-image-20250510202129.png"><br>
<br>corner=True: Shows only lower triangle of plots.
<br><br># Compute correlations
corr = tips.corr(numeric_only=True)

# Plot heatmap
sns.heatmap(corr, annot=True, cmap="coolwarm", vmin=-1, vmax=1)
<br><img alt="Pasted image 20250510202200.png" src="assets/pasted-image-20250510202200.png"><br>
<br>annot=True: Displays values in cells.
<br>vmin/vmax: Sets color scale limits.
<br><br>Split data into subplots based on categories:<br>g = sns.FacetGrid(tips, col="time", row="smoker", margin_titles=True)
g.map(sns.scatterplot, "total_bill", "tip")
<br><img alt="Pasted image 20250510202257.png" src="assets/pasted-image-20250510202257.png"><br>
<br>col/row: Columns to split the grid.
<br>map(): Applies a plotting function to each subplot.
<br><br>Combine Seaborn with Matplotlib for fine-tuning:<br>sns.set_style("darkgrid")  # Themes: white, dark, ticks, whitegrid
sns.set_palette("husl")    # Color palettes: deep, muted, pastel, etc.

ax = sns.barplot(data=tips, x="day", y="total_bill", errorbar=None)
ax.set_title("Average Bill by Day", fontsize=14)
ax.set_ylabel("Average Bill ($)")
plt.xticks(rotation=45)
plt.show()
<br><img alt="Pasted image 20250415193014.png" src="assets/pasted-image-20250415193014.png"><br><br><br>

<br>"ValueError: Could not interpret input 'x'": Ensure column names match DataFrame exactly.
<br>Missing Data: Use dropna() or specify hue_order/order for categorical variables.&gt;
<br>Overplotting: Adjust alpha (transparency) or switch to sns.kdeplot() for dense data.

<br><br><br><br><br>Large datasets (e.g., millions of data points) can slow down plotting, increase memory usage, or produce cluttered visualizations. Here are strategies to optimize plotting for large datasets:<br><br>
<br>Downsampling:

<br>Reduce the number of points plotted by sampling or aggregating data.
<br>Example: Plot every nth point or use statistical summaries (e.g., mean, median).


<br>Use Appropriate Plot Types:

<br>Scatter plots with many points can become unreadable; consider hexbin plots, 2D histograms, or contour plots for density visualization.


<br>Optimize Rendering:

<br>Use Matplotlib’s Agg backend for non-interactive plotting to save memory.
<br>Reduce marker sizes or use line plots instead of scatter for dense data.


<br>Leverage Vectorized Operations:

<br>Use NumPy for computations to avoid slow Python loops.


<br>Seaborn for Aggregated Plots:

<br>Seaborn’s statistical plots (e.g., boxplot, violinplot) automatically summarize data, reducing the need to plot every point.


<br>import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

# Generate large dataset (1M points)
np.random.seed(42)
x = np.random.randn(1_000_000)
y = x + np.random.randn(1_000_000) * 0.5

# Downsample: Take every 100th point
sample_idx = np.arange(0, len(x), 100)
x_sample = x[sample_idx]
y_sample = y[sample_idx]

# Create figure with two subplots
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))

# Scatter plot (downsampled)
ax1.scatter(x_sample, y_sample, s=5, alpha=0.5, color='blue')
ax1.set_title("Downsampled Scatter (10K points)")
ax1.set_xlabel("X")
ax1.set_ylabel("Y")

# Hexbin plot (full dataset)
hb = ax2.hexbin(x, y, gridsize=50, cmap='viridis', mincnt=1)
ax2.set_title("Hexbin Plot (1M points)")
ax2.set_xlabel("X")
ax2.set_ylabel("Y")
fig.colorbar(hb, ax=ax2, label='Counts')

plt.tight_layout()
plt.show()
<br><img alt="Pasted image 20250613145637.png" src="assets/pasted-image-20250613145637.png"><br>
<br>The right subplot uses a hexbin plot to visualize the full 1M points, with hexagonal bins showing density (darker = more points).<br>
see <a data-tooltip-position="top" aria-label="https://matplotlib.org/stable/gallery/statistics/hexbin_demo.html" rel="noopener nofollow" class="external-link" href="https://matplotlib.org/stable/gallery/statistics/hexbin_demo.html" target="_blank">hexagonal binning</a>
<br><br>
we're going to revisit a bit <a data-tooltip-position="top" aria-label="Plotting in Python > 2.1 Figures and Axes The Plotting Canvas" data-href="Plotting in Python#2.1 Figures and Axes The Plotting Canvas" href="plotting-in-python.html#2.1_Figures_and_Axes_The_Plotting_Canvas" class="internal-link" target="_self" rel="noopener nofollow">Figures and Axes: The Plotting Canvas</a> 
<br>Subplots allow you to display multiple plots within a single figure, ideal for comparing datasets or visualizing different aspects of the same data. Matplotlib’s plt.subplots() and Seaborn’s FacetGrid are powerful tools for creating subplot layouts.<br><br>
<br>Grid Layouts: Use plt.subplots(nrows, ncols) to create a grid of axes.
<br>Shared Axes: Share x/y axes to reduce redundancy and align scales.
<br>Custom Layouts: Use GridSpec for non-uniform subplot arrangements.
<br>Seaborn FacetGrid: Automatically creates subplots based on categorical variables.
<br>import matplotlib.pyplot as plt
import numpy as np

# Generate sample data
x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = np.cos(x)
y3 = x**2
y4 = np.exp(x/10)

# Create 2x2 subplot grid with shared x-axis
fig, axes = plt.subplots(2, 2, figsize=(10, 8), sharex=True)

# Flatten axes array for easier indexing
axes = axes.flatten()

# Plot different data on each subplot
axes[0].plot(x, y1, 'b-', label='sin(x)')
axes[0].set_title('Sine Wave')
axes[0].legend()

axes[1].plot(x, y2, 'r--', label='cos(x)')
axes[1].set_title('Cosine Wave')
axes[1].legend()

axes[2].plot(x, y3, 'g-', label='x^2')
axes[2].set_title('Quadratic')
axes[2].legend()

axes[3].plot(x, y4, 'm-.', label='exp(x/10)')
axes[3].set_title('Exponential')
axes[3].legend()

# Add common labels
fig.supxlabel('X (radians)')
fig.supylabel('Y')
plt.tight_layout()
plt.show()
<br><img alt="Pasted image 20250613150634.png" src="assets/pasted-image-20250613150634.png"><br>
Pro Tips:

<br>Flattening Axes: Use axes.flatten() for easier iteration over subplots in a grid.
<br>Custom Layouts: For unequal subplot sizes, use matplotlib.gridspec.GridSpec.
<br>Seaborn Alternative: For categorical data, use sns.catplot or sns.FacetGrid to automatically generate subplots based on variables.

<br><br>Creating reusable plotting functions enhances code modularity, reduces duplication, and ensures consistent styling across visualizations. A more complex function can handle multiple plot types, advanced styling, and robust error handling to accommodate various use cases.<br><br>
<br>Flexibility: Support multiple plot types (e.g., line, scatter) and customization options (e.g., colors, markers, legends).
<br>Error Handling: Validate inputs for data compatibility and user errors.
<br>Return Objects: Return fig and ax for further customization.
<br>Documentation: Use detailed docstrings to clarify parameters and usage.
<br><br>Combining different plot types (e.g., scatter and line, or histogram and KDE) in a single axes or figure can highlight relationships or comparisons effectively.<br><br>
<br>Multiple Plot Calls: Use multiple ax.plot(), ax.scatter(), etc., on the same axes.
<br>Twin Axes: Use ax.twinx() or ax.twiny() to plot different scales on the same subplot.
<br>Legends: Ensure all plot elements are labeled for clarity.
<br>Seaborn + Matplotlib: Use Seaborn for statistical plots and Matplotlib for additional overlays.
<br><br>
shares the range of x and y axis (value range)
<br>
import matplotlib.pyplot as plt
import numpy as np
# Generate sample data
x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = np.cos(x)

# Create figure and axes
fig, ax = plt.subplots(figsize=(8, 5))

# Plot scatter and line
ax.scatter(x[::5], y1[::5], color='blue', label='sin(x)', s=50, alpha=0.6)
ax.plot(x, y2, color='red', linestyle='--', label='cos(x)')

# Customize
ax.set_title('Scatter and Line Overlay')
ax.set_xlabel('X (radians)')
ax.set_ylabel('Y')
ax.legend()
ax.grid(True, linestyle='--', alpha=0.6)

plt.tight_layout()
plt.show()

<br>  <img alt="Pasted image 20250613154311.png" src="assets/pasted-image-20250613154311.png"><br>Explanation:<br>
<br>Overlays a scatter plot of sin(x) (every 5th point) and a line plot of cos(x) on the same axes.
<br>Uses distinct colors and a legend to differentiate the plots.
<br><br>
share the same x axis 
<br>import matplotlib.pyplot as plt
import numpy as np

# Generate sample data
x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = x**2

# Create figure and primary axes
fig, ax1 = plt.subplots(figsize=(8, 5))

# Plot on primary y-axis (sin(x))
ax1.plot(x, y1, color='blue', label='sin(x)')
ax1.set_xlabel('X (radians)')
ax1.set_ylabel('sin(x)', color='blue')
ax1.tick_params(axis='y', labelcolor='blue')

# Create secondary y-axis (x^2)
ax2 = ax1.twinx()
ax2.plot(x, y2, color='red', linestyle='--', label='x^2')
ax2.set_ylabel('x^2', color='red')
ax2.tick_params(axis='y', labelcolor='red')

# Combine legends
lines1, labels1 = ax1.get_legend_handles_labels()
lines2, labels2 = ax2.get_legend_handles_labels()
ax1.legend(lines1 + lines2, labels1 + labels2, loc='upper left')


fig.suptitle('Line Plot with Secondary Y-Axis')
plt.tight_layout()
plt.show()

<br>  <img alt="Pasted image 20250613154234.png" src="assets/pasted-image-20250613154234.png"><br>Explanation:<br>
<br>ax1.twinx() creates a secondary y-axis (ax2) sharing the same x-axis.
<br>Plots sin(x) on the primary y-axis and x^2 on the secondary y-axis, which accommodates the different scales (sin(x) ranges -1 to 1, x^2 ranges 0 to 100).
<br>Color-coded labels and ticks improve readability.
<br><br>
share the same y axis 
<br>
import matplotlib.pyplot as plt
import numpy as np

# Data
x = np.linspace(0, 10, 100)
y = np.sin(x)

# Create the main plot
fig, ax1 = plt.subplots()
ax1.plot(x, y, color='blue')
ax1.set_xlabel('Time (seconds)')
ax1.set_ylabel('Amplitude')
ax1.set_title('twiny() Example - Two X Axes')

# Create a twin x-axis (shares the y-axis)
ax2 = ax1.twiny()

# Set a different scale for the top x-axis (e.g., time in minutes)
ax2.set_xlim(ax1.get_xlim())  # Make sure they align
ax2.set_xticks(np.linspace(0, 10, 6))
ax2.set_xticklabels([f'{t/60:.2f}' for t in np.linspace(0, 10, 6)])
ax2.set_xlabel('Time (minutes)')

plt.show()

<br><img alt="Pasted image 20250613162408.png" src="assets/pasted-image-20250613162408.png"><br>
Explanation:<br>
<br>ax1.twiny() creates a secondary x-axis (ax2) sharing the same y-axis.
<br>Plots sin(x) with x-axis in seconds (primary) and hours (secondary, where minutes= seconds/60).
<br>Demonstrates how twiny() is used for different x-axis scales (e.g., different units).
<br>
Difference Between twinx() and twiny():

<br>twinx(): Creates a secondary y-axis with a shared x-axis, ideal for plotting variables with different y-scales (e.g., temperature vs. pressure).
<br>twiny(): Creates a secondary x-axis with a shared y-axis, useful for different x-axis units or scales (e.g., time in seconds vs. hours).

<br><br>import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Generate sample data
np.random.seed(42)
x = np.random.randn(1000)
y = x + np.random.randn(1000) * 0.5

# Create figure and axes
fig, ax = plt.subplots(figsize=(8, 5))

# Seaborn KDE plot
sns.kdeplot(x=x, y=y, ax=ax, cmap='Blues', fill=True, alpha=0.5)

# Matplotlib scatter overlay
ax.scatter(x[::50], y[::50], color='red', label='Data Points', s=30, alpha=0.7)

# Customize
ax.set_title('KDE and Scatter Overlay')
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.legend()
ax.grid(True, linestyle='--', alpha=0.6)

  

plt.tight_layout()
plt.show()
<br><img alt="Pasted image 20250613162825.png" src="assets/pasted-image-20250613162825.png"><br>
Explanation:<br>
<br>Uses Seaborn’s kdeplot to show the density of a bivariate dataset.
<br>Overlays a Matplotlib scatter plot of a subset of points to highlight individual data.
<br>Combines Seaborn’s statistical visualization with Matplotlib’s flexibility.
<br>Pro Tips:<br>
<br>Twin Axes Usage: Use twinx() for different y-axis scales (e.g., different units like amplitude vs. power). Use twiny() for different x-axis scales (e.g., time in different units).
<br>Legend Management: Combine legends from multiple axes or plots using get_legend_handles_labels() to avoid clutter.
<br>Seaborn + Matplotlib: Use Seaborn for quick statistical plots and Matplotlib for precise overlays or customizations.
<br>Readability: Limit combined plots to 2–3 elements to avoid visual overload.
<br><br><br><br>Debugging plotting issues in Python can be challenging due to the complexities of libraries like Matplotlib and Seaborn. This section addresses common errors, figure size and resolution problems, and techniques for handling overlapping labels, providing practical solutions to ensure your visualizations are robust and professional.<br><br>Plotting libraries like Matplotlib and Seaborn can throw errors due to incorrect inputs, library-specific quirks, or environmental issues. Below are common errors, their causes, and solutions.<br><br>
<br>Cause: The arrays for x and y in a plot have different lengths or shapes, often due to slicing or filtering errors.
<br>Fix: Ensure x and y have the same length by checking their shapes or lengths. Convert lists to NumPy arrays for consistency and verify data before plotting.
<br>Pro Tip: Always validate array shapes, especially when working with sliced or dynamically generated data.
<br><br>
<br>Cause: Seaborn can’t find the specified column in the DataFrame, often due to typos, case sensitivity, or missing data.
<br>Fix: Verify column names by checking the DataFrame’s columns. Handle missing data by removing rows with null values or specifying valid categorical orders for hue parameters.
<br>Pro Tip: Inspect DataFrame structure to confirm column names and data types, and preprocess data to remove or impute missing values.
<br><br>
<br>Cause: Incorrect import or namespace conflict, such as importing the main Matplotlib module instead of its plotting submodule.
<br>Fix: Use the correct import for plotting functions to ensure access to plotting methods.
<br>Pro Tip: Avoid wildcard imports to prevent namespace conflicts and ensure clear access to plotting functions.
<br><br>
<br>Cause: Missing display command in scripts or incorrect backend settings in environments like Jupyter.
<br>Fix: Explicitly call the display function in scripts. In Jupyter, configure the appropriate backend for inline or interactive plotting.
<br>Pro Tip: Check the current backend to diagnose display issues and switch to an interactive backend if needed.
<br><br>
<br>Cause: Non-numeric data (e.g., strings or objects) passed to plotting functions that expect numbers.
<br>Fix: Convert data to numeric types using appropriate conversion functions before plotting.
<br>Pro Tip: Always check data types before plotting to ensure compatibility.
<br><br>
<br>Check Inputs: Inspect data shapes, types, and content before plotting to catch issues early.
<br>Update Libraries: Keep Matplotlib and Seaborn updated to avoid bugs in older versions.
<br>Minimal Example: Reproduce errors with small datasets to isolate the problem quickly.
<br><br><br>Figure size and resolution issues can result in distorted, pixelated, or improperly scaled plots, especially when saving for reports or presentations. This subsection explains how to control figure size, aspect ratio, and resolution effectively.<br><br>
<br>Figure Size: Defined by width and height in inches, set when creating a figure.
<br>Resolution (DPI): Dots per inch, determining image quality when saving (higher DPI for print, lower for screens).
<br>Aspect Ratio: The width-to-height ratio, affecting plot proportions.
<br>Backend Effects: Different rendering backends impact display and performance.
<br><br>
<br>Issue: Plot Too Small or Large

<br>Cause: Default figure size may not suit the display or output medium.
<br>Fix: Specify a custom figure size when creating the plot or set a global default size.
<br>Pro Tip: Choose figure sizes proportional to the output medium, such as larger for slides or smaller for papers.


<br>Issue: Pixelated or Low-Quality Saved Plots

<br>Cause: Low DPI setting when saving, resulting in blurry images.
<br>Fix: Increase DPI to 300 or higher for high-quality outputs, especially for print or publication.
<br>Pro Tip: Trim excess whitespace when saving to ensure clean outputs.


<br>Issue: Incorrect Aspect Ratio

<br>Cause: Default aspect ratio may distort shapes, such as making circles appear as ovals in scatter plots.
<br>Fix: Set equal scaling for x and y axes or adjust figure size to match data proportions.
<br>Pro Tip: Always use equal aspect ratios for geometric or spatial data to preserve shapes.


<br>Issue: Backend-Related Display Issues

<br>Cause: Using a non-interactive backend that doesn’t support display.
<br>Fix: Switch to an interactive backend or configure the environment for inline plotting.
<br>Pro Tip: Verify the current backend to diagnose rendering issues.


<br><br>
<br>Screen vs. Print: Use lower DPI (e.g., 100) for screen displays and higher DPI (e.g., 300) for print or publication.
<br>Vector Formats: Save plots as PDF or SVG for scalable, high-quality graphics editable in tools like Illustrator.
<br>Preview Size: Test figure size on-screen before saving to ensure it fits the intended output.
<br><br><br>Overlapping labels, such as tick labels, axis labels, or annotations, can make plots unreadable, particularly with dense data or long text. This subsection provides techniques to prevent or fix overlap.<br><br>
<br>Issue: Overlapping Tick Labels

<br>Cause: Too many ticks or long labels on axes, common with categorical data or dense numerical scales.
<br>Fix: Reduce the number of ticks, rotate labels to an angle (e.g., 45 degrees), or use automatic layout adjustments.
<br>Pro Tip: Align rotated labels to the right for better readability with angled text.


<br>Issue: Overlapping Axis Labels or Title

<br>Cause: Axis labels or titles positioned too close to ticks or other plot elements.
<br>Fix: Increase padding between labels and plot elements using specific parameters.
<br>Pro Tip: Use padding values of 10–20 for titles and 5–15 for axis labels to create clear separation.


<br>Issue: Overlapping Annotations or Text

<br>Cause: Annotations placed too closely in dense plots, such as scatter plots with many labels.
<br>Fix: Adjust annotation positions manually, expand the plot area, or use automated label placement tools like adjustText.
<br>Pro Tip: Install and use adjustText for complex scatter plots to automatically optimize label placement.


<br>Issue: Overlapping Subplot Elements

<br>Cause: Subplots positioned too closely, causing titles, ticks, or labels to overlap.
<br>Fix: Adjust subplot spacing using automatic layout tools or manual spacing parameters.
<br>Pro Tip: Use spacing values between 0.2–0.5 for balanced subplot layouts.


<br><br>
<br>Automatic Fixes: Apply automatic layout adjustments as a first step to resolve most overlap issues.
<br>Font Size: Reduce tick label font size for crowded axes to improve clarity.
<br>Custom Ticks: Use dynamic tick locators to reduce tick density automatically.
<br>Preview: Check label placement in a small figure before saving to high-resolution formats.
]]></description><link>plotting-in-python.html</link><guid isPermaLink="false">Plotting in Python.md</guid><pubDate>Fri, 13 Jun 2025 15:41:53 GMT</pubDate><enclosure url="https://matplotlib.org/stable/_images/users-explain-axes-axes_intro-1.2x.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://matplotlib.org/stable/_images/users-explain-axes-axes_intro-1.2x.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Python Virtual environments and Anaconda]]></title><description><![CDATA[ 
 <br><br><br>
*Note : all commands here are specific for Linux-based Operating systems*<br>
*if you're a windows user consider using WSL or virtual Machine 
<br><br><br>
<br>
<a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 1. Introduction to Virtual Environments" data-href="Python Virtual environments and Anaconda#1. Introduction to Virtual Environments" href="python-virtual-environments-and-anaconda.html#1._Introduction_to_Virtual_Environments" class="internal-link" target="_self" rel="noopener nofollow">Introduction to Virtual Environments</a><br>
1.1 <a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 1.1 What is a Python Virtual environments and Anaconda" data-href="Python Virtual environments and Anaconda#1.1 What is a Python Virtual environments and Anaconda" href="python-virtual-environments-and-anaconda.html#1.1_What_is_a_Python_Virtual_environments_and_Anaconda" class="internal-link" target="_self" rel="noopener nofollow">What Is a Virtual Environment?</a><br>
1.2 <a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 1.2 Why Virtual Environments Are Necessary" data-href="Python Virtual environments and Anaconda#1.2 Why Virtual Environments Are Necessary" href="python-virtual-environments-and-anaconda.html#1.2_Why_Virtual_Environments_Are_Necessary" class="internal-link" target="_self" rel="noopener nofollow">Why Virtual Environments Are Necessary</a><br>
1.3 <a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 1.3 Virtual Environment Hierarchy and Files" data-href="Python Virtual environments and Anaconda#1.3 Virtual Environment Hierarchy and Files" href="python-virtual-environments-and-anaconda.html#1.3_Virtual_Environment_Hierarchy_and_Files" class="internal-link" target="_self" rel="noopener nofollow">Virtual Environment Hierarchy and Files</a><br>
1.4 <a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 1.4 Creating and Managing Python venv Environments" data-href="Python Virtual environments and Anaconda#1.4 Creating and Managing Python venv Environments" href="python-virtual-environments-and-anaconda.html#1.4_Creating_and_Managing_Python_venv_Environments" class="internal-link" target="_self" rel="noopener nofollow">Creating and Managing Python venv Environments</a><br>
1.5 <a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 1.5 Sharing Virtual Environments" data-href="Python Virtual environments and Anaconda#1.5 Sharing Virtual Environments" href="python-virtual-environments-and-anaconda.html#1.5_Sharing_Virtual_Environments" class="internal-link" target="_self" rel="noopener nofollow">Sharing Virtual Environments</a>  

<br>
<a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 2. Understanding Anaconda3 (Theoretically)" data-href="Python Virtual environments and Anaconda#2. Understanding Anaconda3 (Theoretically)" href="python-virtual-environments-and-anaconda.html#2._Understanding_Anaconda3_(Theoretically)" class="internal-link" target="_self" rel="noopener nofollow">Understanding Anaconda3 (Theoretically)</a><br>
2.1 <a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 2.1 Overview of Anaconda3" data-href="Python Virtual environments and Anaconda#2.1 Overview of Anaconda3" href="python-virtual-environments-and-anaconda.html#2.1_Overview_of_Anaconda3" class="internal-link" target="_self" rel="noopener nofollow">Overview of Anaconda3</a><br>
2.2 <a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 2.2 Base Environment vs. User-Created Environments" data-href="Python Virtual environments and Anaconda#2.2 Base Environment vs. User-Created Environments" href="python-virtual-environments-and-anaconda.html#2.2_Base_Environment_vs._User-Created_Environments" class="internal-link" target="_self" rel="noopener nofollow">Base Environment vs. User-Created Environments</a><br>
2.3 <a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 2.3 Accessibility of Environments" data-href="Python Virtual environments and Anaconda#2.3 Accessibility of Environments" href="python-virtual-environments-and-anaconda.html#2.3_Accessibility_of_Environments" class="internal-link" target="_self" rel="noopener nofollow">Accessibility of Environments</a><br>
2.4 <a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 2.4 How Anaconda Manages Its Environments" data-href="Python Virtual environments and Anaconda#2.4 How Anaconda Manages Its Environments" href="python-virtual-environments-and-anaconda.html#2.4_How_Anaconda_Manages_Its_Environments" class="internal-link" target="_self" rel="noopener nofollow">How Anaconda Manages Its Environments</a><br>
2.5 <a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 2.5 Environment Filesystem" data-href="Python Virtual environments and Anaconda#2.5 Environment Filesystem" href="python-virtual-environments-and-anaconda.html#2.5_Environment_Filesystem" class="internal-link" target="_self" rel="noopener nofollow">Environment Filesystem</a>  

<br>
<a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 3. Practicing Anaconda3" data-href="Python Virtual environments and Anaconda#3. Practicing Anaconda3" href="python-virtual-environments-and-anaconda.html#3._Practicing_Anaconda3" class="internal-link" target="_self" rel="noopener nofollow">Practicing Anaconda3</a><br>
3.1 <a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 3.1 Installation Process and Shell Configuration (Linux-Specific)" data-href="Python Virtual environments and Anaconda#3.1 Installation Process and Shell Configuration (Linux-Specific)" href="python-virtual-environments-and-anaconda.html#3.1_Installation_Process_and_Shell_Configuration_(Linux-Specific)" class="internal-link" target="_self" rel="noopener nofollow">Installation Process and Shell Configuration (Linux-Specific)</a><br>
3.2 <a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 3.2 Basic Anaconda Commands" data-href="Python Virtual environments and Anaconda#3.2 Basic Anaconda Commands" href="python-virtual-environments-and-anaconda.html#3.2_Basic_Anaconda_Commands" class="internal-link" target="_self" rel="noopener nofollow">Basic Anaconda Commands</a><br>
3.3 <a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 3.3 Working with environment.yml Files" data-href="Python Virtual environments and Anaconda#3.3 Working with environment.yml Files" href="python-virtual-environments-and-anaconda.html#3.3_Working_with_environment.yml_Files" class="internal-link" target="_self" rel="noopener nofollow">Working with environment.yml Files</a><br>
3.4 <a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 3.4 Advanced Commands and Path-Specific Projects" data-href="Python Virtual environments and Anaconda#3.4 Advanced Commands and Path-Specific Projects" href="python-virtual-environments-and-anaconda.html#3.4_Advanced_Commands_and_Path-Specific_Projects" class="internal-link" target="_self" rel="noopener nofollow">Advanced Commands and Path-Specific Projects</a>  

<br>
<a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 4. Anaconda Super User Customization" data-href="Python Virtual environments and Anaconda#4. Anaconda Super User Customization" href="python-virtual-environments-and-anaconda.html#4._Anaconda_Super_User_Customization" class="internal-link" target="_self" rel="noopener nofollow">Anaconda Super User Customization</a><br>
4.1 <a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 4.1 Advanced Environment Customizations" data-href="Python Virtual environments and Anaconda#4.1 Advanced Environment Customizations" href="python-virtual-environments-and-anaconda.html#4.1_Advanced_Environment_Customizations" class="internal-link" target="_self" rel="noopener nofollow">Advanced Environment Customizations</a><br>
4.2 <a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 4.2 Shell Aliases and Shortcuts" data-href="Python Virtual environments and Anaconda#4.2 Shell Aliases and Shortcuts" href="python-virtual-environments-and-anaconda.html#4.2_Shell_Aliases_and_Shortcuts" class="internal-link" target="_self" rel="noopener nofollow">Shell Aliases and Shortcuts</a><br>
4.3 <a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 4.3 Default Skeleton for Virtual Environments" data-href="Python Virtual environments and Anaconda#4.3 Default Skeleton for Virtual Environments" href="python-virtual-environments-and-anaconda.html#4.3_Default_Skeleton_for_Virtual_Environments" class="internal-link" target="_self" rel="noopener nofollow">Default Skeleton for Virtual Environments</a><br>
4.4 <a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 4.4 mamba or conda or pip" data-href="Python Virtual environments and Anaconda#4.4 mamba or conda or pip" href="python-virtual-environments-and-anaconda.html#4.4_mamba_or_conda_or_pip" class="internal-link" target="_self" rel="noopener nofollow">mamba or conda or pip</a> 

<br>
<a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 5. Jupyter Lab with Conda" data-href="Python Virtual environments and Anaconda#5. Jupyter Lab with Conda" href="python-virtual-environments-and-anaconda.html#5._Jupyter_Lab_with_Conda" class="internal-link" target="_self" rel="noopener nofollow">Jupyter Lab with Conda</a><br>
5.1 <a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 5.1 Jupyter Lab Overview and Comparison" data-href="Python Virtual environments and Anaconda#5.1 Jupyter Lab Overview and Comparison" href="python-virtual-environments-and-anaconda.html#5.1_Jupyter_Lab_Overview_and_Comparison" class="internal-link" target="_self" rel="noopener nofollow">Jupyter Lab Overview and Comparison</a><br>
5.2 <a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 5.2 Installing and Managing Jupyter Lab" data-href="Python Virtual environments and Anaconda#5.2 Installing and Managing Jupyter Lab" href="python-virtual-environments-and-anaconda.html#5.2_Installing_and_Managing_Jupyter_Lab" class="internal-link" target="_self" rel="noopener nofollow">Installing and Managing Jupyter Lab</a><br>
5.3 <a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 5.3 Jupyter Architecture and Kernel Registrations" data-href="Python Virtual environments and Anaconda#5.3 Jupyter Architecture and Kernel Registrations" href="python-virtual-environments-and-anaconda.html#5.3_Jupyter_Architecture_and_Kernel_Registrations" class="internal-link" target="_self" rel="noopener nofollow">Jupyter Architecture and Kernel Registrations</a><br>
5.4 <a data-tooltip-position="top" aria-label="Python Virtual environments and Anaconda > 5.4 Managing Jupyter Lab Extensions" data-href="Python Virtual environments and Anaconda#5.4 Managing Jupyter Lab Extensions" href="python-virtual-environments-and-anaconda.html#5.4_Managing_Jupyter_Lab_Extensions" class="internal-link" target="_self" rel="noopener nofollow">Managing Jupyter Lab Extensions</a>  

<br><br><br><br>A virtual environment is a directory that includes a Python interpreter and its dependencies, isolated from the system’s global packages. Each virtual environment can contain a different set of libraries, allowing multiple projects to coexist without version conflicts.<br><br>
<br>Dependency Isolation: Ensures that each project uses the specific versions of packages it needs.  
<br>Reproducibility: Other developers can recreate the same environment to match your project setup.  
<br>Avoiding Conflicts: Different projects can have different (and often incompatible) library versions.  
<br>Minimal Global Footprint: Reduces clutter in the system-wide Python installation or the Anaconda base environment.
<br><br>A typical Python virtual environment contains something like:<br>myenv/
├── bin/
│   ├── activate
│   ├── python
│   └── pip
├── lib/
│   └── python3.11/
│       └── site-packages/
└── include/
<br>
<br>bin/: Houses utilities (e.g., Python executables and the activate script).  
<br>lib/: Contains installed libraries, typically under site-packages.  
<br>include/: Stores header files for compiled modules or libraries.
<br><br># Create a virtual environment with the built-in venv module
python3 -m venv myenv

# Activate the environment (Linux/Mac)
source myenv/bin/activate  

# Activate the environment (Windows)
myenv\Scripts\activate  

# Deactivate when done
deactivate
<br>If you do not require Conda’s advanced dependency resolution or cross-language management, Python’s built-in venv is sufficient for many lightweight workflows.<br><br>When working on a project with others or setting up the same environment on another machine, you can share your virtual environment setup using a requirements file or a lock file.<br><br>pip freeze &gt; requirements.txt
<br><br>python3 -m venv myenv  # Create a new virtual environment
source myenv/bin/activate  # Activate it (Windows: myenv\Scripts\activate)
pip install -r requirements.txt  # Install dependencies
<br><br><br><br>Anaconda3 is a distribution of Python and R widely used in data science due to its convenient packaging of essential libraries (NumPy, pandas, etc.). It ships with the Conda package manager, offering sophisticated dependency resolution and environment management.<br>
<br>Anaconda vs Conda :

<br>Anaconda is a full-fledged distribution that includes Python, R, Conda, and many commonly used data science libraries.
<br>Conda is the package manager and environment manager that can be used independently from Anaconda (e.g., in Miniconda), allowing you to install only the packages you need.


<br><br>
<br>Base Environment:<br>
The environment installed by default whens you set up Anaconda. It often includes fundamental data-science packages.
<br>User-Created Environments:<br>
These are additional environments made with Conda. You can isolate new projects in separate environments for optimal dependency management.
<br><br>
<br>System-Wide: Environments stored in a central directory (e.g., /opt/anaconda3/envs/) are accessible to all users on that system (with appropriate permissions).  
<br>Path-Specific: Environments created or moved to custom folders within a project directory. Useful for grouping your environment with the codebase itself (ensuring all required dependencies are self-contained).
<br><br>Conda keeps a versatile environment index.<br>
Key commands:<br><br><img alt="https://media.licdn.com/dms/image/v2/D5612AQElU5Sk22RUeA/article-cover_image-shrink_720_1280/article-cover_image-shrink_720_1280/0/1681478776234?e=2147483647&amp;v=beta&amp;t=VrKzoDN1tojtDsKgFcjy-8rqgcdfGS71A3tN2pohiAc" src="https://media.licdn.com/dms/image/v2/D5612AQElU5Sk22RUeA/article-cover_image-shrink_720_1280/article-cover_image-shrink_720_1280/0/1681478776234?e=2147483647&amp;v=beta&amp;t=VrKzoDN1tojtDsKgFcjy-8rqgcdfGS71A3tN2pohiAc" referrerpolicy="no-referrer"><br><br>Within an Anaconda install, you commonly find a layout like:<br>/opt/anaconda3/
├── envs/
│   ├── base/
│   ├── myenv/
│   └── ...
└── ...
<br>
<br>envs/: Subdirectory that stores multiple Conda environments.  
<br>environment.yml: A YAML file used to record or reconstruct specific environments. It includes dependencies, Python version, and more.
<br><br><br><br># 1) Download the installer (e.g. Anaconda3-*.sh) from the official website
# 2) Run the installer
bash Anaconda3-*.sh

# 3) Follow the prompts and accept license terms
# 4) Add Conda to your PATH in ~/.bashrc or ~/.zshrc when asked
source ~/.bashrc  # or source ~/.zshrc
<br><br># Display Conda info (including environment locations)
conda info

# Show version
conda --version

# List installed packages
conda list

# Update Conda itself
conda update conda

# Create a new environment
conda create -n myenv python=3.11

# Activate/deactivate environment
conda activate myenv
conda deactivate

# List environments
conda env list

# Remove an environment
conda env remove -n myenv
<br><br>environment.yml files facilitate environment replication and sharing. The structure includes:<br>name: myenv
channels:
  - defaults
dependencies:
  - python=3.11   # pinned Python version
  - numpy         # external dependencies
  - pandas
  - matplotlib
  - jupyterlab
  - ipykernel
  - pip
<br>
<br>
name: The environment name (e.g., myenv).

<br>
channels: Source(s) where packages are fetched (e.g., defaults, conda-forge, etc.).

<br>
dependencies: Packages (with optional versions). You can also specify pip requirements by including:
- pip:
  - my-special-library==1.2.3


<br>
Usage:  
# Create an environment from a YAML file
conda env create -f environment.yml

# Export an existing environment
conda env export &gt; environment.yml


<br><br>If you want to create a Conda environment in a project-specific folder, run:<br>conda create --prefix /home/user/projects/my_project/env python=3.11
<br>
<br>
Why Path-Specific?  

<br>Keeps your environment localized to the project directory.
<br>Eases portability when sharing code (especially if you commit environment files or relocate the entire folder).  


<br>
Activating a Path-Specific Environment:
conda activate /home/user/projects/my_project/env


<br>
Listing Packages for Projects:
conda list --prefix /home/user/projects/my_project/env

This approach helps you precisely control the environment location without cluttering the<br>
global envs/ directory.

<br>
Advanced commands (CheatSheet):

<br># 1. Install a package from a specific channel (e.g., conda-forge)
conda install -n myenv -c conda-forge scikit-learn

# 2. Downgrade a package to a specific version
conda install -n myenv numpy=1.18

# 3. Show environment details (including active packages)
conda list -n myenv

# 4. Clone an existing environment
conda create --name newenv --clone oldenv

# 5. Update all packages in an environment
conda update --all

# 6. Check for outdated packages
conda update --dry-run  # Shows what would be updated

# 7. Search for a package across all channels
conda search &lt;package-name&gt;

# 8. Install a package from a .tar.bz2 file
conda install /path/to/package.tar.bz2

# 9. Remove a specific package from an environment
conda remove -n myenv package_name

# 10. Clean unused packages and caches
conda clean --all  # Frees up disk space

<br><br><br><br>Advanced users often configure .condarc or environment variables to override default Conda behaviors (e.g., specifying custom channels, turning off auto_activate_base, etc.). These settings can significantly streamline and automate environment workflows.<br><br>Editing your ~/.bashrc or ~/.zshrc to include aliases is a simple productivity boost:<br>alias activate_ds="conda activate data-science"
alias activate_ml="conda activate machine-learning"
alias envs="conda env list"
alias jl="jupyter lab"
<br>Reload your shell:<br>source ~/.bashrc   # or source ~/.zshrc
<br><br>You may create a “skeleton” directory that holds:<br>my_skeleton/
├── environment.yml
├── src/
│   └── ...
├── tests/
│   └── ...
└── README.md
<br>
<br>Purpose: Ensures every new project has a standardized layout.  
<br>Usage: Copy this skeleton when starting a new project, then run:
cd new_project
conda env create -f environment.yml

This seamlessly provisions your environment with predefined settings (e.g., pinned Python versions, essential packages).
<br><br>
<br>
Pip:<br>
Python’s default package installer. Ideal for lightweight virtual environments (using venv) and installing packages from PyPI.

<br>
Conda:<br>
A robust environment and package manager from Anaconda/Miniconda. It manages dependencies well, especially for data science projects.

<br>
Mamba:<br>
A faster, C++ reimplementation of Conda. It uses the same commands as Conda but speeds up package resolution and installation.

<br><br># ----- Using Pip (with venv) -----
python3 -m venv myenv
source myenv/bin/activate
pip install numpy pandas scikit-learn

# ----- Using Conda -----
conda create -n myenv python=3.11 -y
conda activate myenv
conda install numpy pandas scikit-learn -y

# ----- Using Mamba -----
# First, install mamba in your base environment if not already installed:
conda install mamba -n base -c conda-forge -y
# Then create and activate an environment, and install packages:
mamba create -n myenv python=3.11 -y
conda activate myenv
mamba install numpy pandas scikit-learn -y
<br><br>
<br>Never mix&nbsp;conda&nbsp;and&nbsp;pip&nbsp;in the same environment&nbsp;until all conda options are exhausted.
<br>Use&nbsp;mamba&nbsp;for daily conda operations and fall back to&nbsp;conda&nbsp;only if edge-case errors occur.
<br>Prefer&nbsp;conda-forge&nbsp;channel for newer packages
<br>conda config --add channels conda-forge
conda config --set channel_priority strict
<br><br><br><br>Jupyter Lab is a powerful IDE-like environment built on top of Jupyter Notebook technology. It integrates notebooks, terminals, file explorers, and more in a flexible UI. <br>
<br>Jupyter Lab vs. Google Colab:  

<br>Jupyter Lab: Run locally or on a server you control, offering complete customizability of packages/kernels.  
<br>Google Colab: A cloud-based environment with pre-installed packages but limited customization for local library installation.


<br><br>A common practice is to install Jupyter Lab in the base environment:<br>conda install -n base jupyterlab nb_conda_kernels ipykernel
<br>
<br>jupyterlab: The core application.  
<br>nb_conda_kernels: Detects kernels from all Conda environments, making them selectable in Jupyter.  
<br>ipykernel: Enables registering Python environments as Jupyter kernels.
<br><br><br><a data-tooltip-position="top" aria-label="https://docs.jupyter.org/en/stable/projects/architecture/content-architecture.html" rel="noopener nofollow" class="external-link" href="https://docs.jupyter.org/en/stable/projects/architecture/content-architecture.html" target="_blank">further readings: documentation</a><br>Jupyter’s architecture can be broken down into three main components:<br>
<br>Client (Front-End):  

<br>JupyterLab or Notebook interface where code cells are written and rendered.


<br>Jupyter Server:  

<br>Manages incoming requests from the client and dispatches them to the appropriate kernel.
<br>Handles saving notebooks, etc.


<br>Kernel:  

<br>The computing engine that executes the code. For Python, the kernel is typically powered by ipykernel.


<br><img alt="Pasted image 20250426180522.png" src="assets/pasted-image-20250426180522.png"><br>
<a data-tooltip-position="top" aria-label="https://docs.jupyter.org/en/stable/projects/architecture/content-architecture.html#the-jupyter-notebook-interface" rel="noopener nofollow" class="external-link" href="https://docs.jupyter.org/en/stable/projects/architecture/content-architecture.html#the-jupyter-notebook-interface" target="_blank">source</a><br><br>
<br>Kernel Registration: The process of informing Jupyter about a specific environment (kernel) so Jupyter Lab can launch and run code within that environment.  
<br>How It Works:  

<br>You install ipykernel in a given environment.  
<br>You run a registration command to add that environment to Jupyter’s kernel list:
conda activate myenv
python -m ipykernel install --user --name myenv --display-name "Python (myenv)"


<br>Jupyter stores the kernel specification (usually in ~/.local/share/jupyter/kernels/myenv/ on Linux) so that environment can be selected from the Jupyter Lab UI.  


<br>By registering multiple environments as kernels, you can switch between them easily within Jupyter Lab—perfect for testing different versions of libraries or using different Python interpreters for various tasks.<br><br># Install a specific extension (e.g., Table of Contents)
pip install jupyterlab-toc

# Install an extension using Conda (if available)
conda install -c conda-forge jupyterlab-toc

# Install multiple useful extensions with pip
pip install jupyterlab-git jupyterlab-toc jupyterlab-variableinspector jupyterlab-lsp python-lsp-server

# Install multiple useful extensions with Conda
conda install -c conda-forge jupyterlab-git jupyterlab-toc jupyterlab-variableinspector jupyterlab-lsp python-lsp-server

# Update JupyterLab and all installed extensions (pip)
pip install --upgrade jupyterlab

# Update all JupyterLab extensions (pip)
pip install --upgrade jupyterlab-git jupyterlab-toc jupyterlab-variableinspector jupyterlab-lsp python-lsp-server

# Update JupyterLab and all installed extensions (Conda)
conda update -c conda-forge jupyterlab

# Update a specific extension (pip)
pip install --upgrade jupyterlab-toc

# Update a specific extension (Conda)
conda update -c conda-forge jupyterlab-toc

# Uninstall an extension (pip)
pip uninstall jupyterlab-toc

# Uninstall an extension (Conda)
conda remove jupyterlab-toc

# Remove multiple extensions (pip)
pip uninstall jupyterlab-git jupyterlab-variableinspector

# Remove multiple extensions (Conda)
conda remove jupyterlab-git jupyterlab-variableinspector

# List all installed JupyterLab extensions (pip)
pip list | grep jupyterlab

# List all installed JupyterLab extensions (Conda)
conda list | grep jupyterlab

# Check available kernels in JupyterLab
jupyter kernelspec list

# Restart JupyterLab to apply changes
jupyter lab build

<br>JupyterLab extensions are now managed as Python packages, making installation easier. Useful extensions include:<br>
<br>jupyterlab-toc – Table of Contents
<br>jupyterlab-git – Git integration
<br>jupyterlab-variableinspector – Variable Explorer
<br>]]></description><link>python-virtual-environments-and-anaconda.html</link><guid isPermaLink="false">Python Virtual environments and Anaconda.md</guid><pubDate>Sat, 26 Apr 2025 17:08:29 GMT</pubDate><enclosure url="https://media.licdn.com/dms/image/v2/D5612AQElU5Sk22RUeA/article-cover_image-shrink_720_1280/article-cover_image-shrink_720_1280/0/1681478776234?e=2147483647&amp;v=beta&amp;t=VrKzoDN1tojtDsKgFcjy-8rqgcdfGS71A3tN2pohiAc" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://media.licdn.com/dms/image/v2/D5612AQElU5Sk22RUeA/article-cover_image-shrink_720_1280/article-cover_image-shrink_720_1280/0/1681478776234?e=2147483647&amp;v=beta&amp;t=VrKzoDN1tojtDsKgFcjy-8rqgcdfGS71A3tN2pohiAc&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Beyond Basics Python]]></title><description><![CDATA[ 
 <br><br>Welcome to the "Beyond Basics Python" vault! This vault is designed to help you explore advanced Python topics and deepen your understanding of the language. <br>
*Note: This vault assumes you have a solid understanding of basic Python concepts such as variables, loops, and functions. If you’re new to Python, it’s recommended to start with beginner-level resources before diving into this content.*
<br>Here, you will find a collection of notes and resources on topics such as:<br><br>
<br>
<a data-href="Python Virtual environments and Anaconda" href="python-virtual-environments-and-anaconda.html" class="internal-link" target="_self" rel="noopener nofollow">Python Virtual environments and Anaconda</a> : Learn how to create and manage virtual environments in Python using venv and Anaconda.<br>
Learn how to install , set up and manage the popular IDE jupyter lab<br>
Relevance:

<br>Software Development: Essential for managing dependencies across multiple projects.
<br>Data Science: Helps isolate project environments for consistency across different tools and libraries (e.g., TensorFlow, pandas).
<br>Machine Learning: Ensures reproducibility by managing environment-specific libraries for model training.


<br>
<a data-href="Plotting in Python" href="plotting-in-python.html" class="internal-link" target="_self" rel="noopener nofollow">Plotting in Python</a> : Master the essentials of Python plotting—including syntax, basic plotting patterns, and reasoning—so you can create effective visualizations without relying on external tools.<br>
Relevance:

<br>Data Science: Core for visualizing data distributions, trends, and patterns using libraries like matplotlib, seaborn, and plotly.
<br>Machine Learning: Vital for plotting model performance and diagnostics (e.g., ROC curves, loss functions).
<br>Web Development: Plotting is essential for creating interactive visualizations in web apps (using Dash or Flask).


<br>]]></description><link>summary.html</link><guid isPermaLink="false">Summary.md</guid><pubDate>Fri, 13 Jun 2025 13:29:58 GMT</pubDate></item></channel></rss>